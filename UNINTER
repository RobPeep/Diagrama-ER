{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMjrncxVK2eB+3xgTx4qL0k",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RobPeep/Diagrama-ER/blob/main/UNINTER\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YEY7hIWcexl1",
        "outputId": "184abae6-5e83-4314-9288-5d555e3854b5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Insira o valor base do plano: 155.50\n",
            "Insira a idade do cliente: 29\n",
            "Bem vindo, este sistema foi desenvolvido por Raul Robert Botelho Silva\n",
            "O valor mensal do plano para a idade de 29 anos é de: R$ 349.88\n"
          ]
        }
      ],
      "source": [
        "# Sistema desenvolvido por Raul Robert Botelho Silva\n",
        "\n",
        "# Solicita o valor base do plano\n",
        "valor_base = float(input(\"Insira o valor base do plano: \"))\n",
        "\n",
        "# Solicita a idade do cliente\n",
        "idade = int(input(\"Insira a idade do cliente: \"))\n",
        "\n",
        "# Porcentagem de acordo com a idade do cliente\n",
        "if 0 <= idade < 19:\n",
        "    porcentagem = 100\n",
        "elif 19 <= idade < 29:\n",
        "    porcentagem = 150\n",
        "elif 29 <= idade < 39:\n",
        "    porcentagem = 225\n",
        "elif 39 <= idade < 49:\n",
        "    porcentagem = 240\n",
        "elif 49 <= idade < 59:\n",
        "    porcentagem = 350\n",
        "else:\n",
        "    porcentagem = 600\n",
        "\n",
        "# Calculo do valor mensal do plano\n",
        "valor_mensal = valor_base * (porcentagem / 100)\n",
        "\n",
        "\n",
        "# Resultado\n",
        "print(\"Bem vindo, este sistema foi desenvolvido por Raul Robert Botelho Silva\")\n",
        "print(f\"O valor mensal do plano para a idade de {idade} anos é de: R$ {valor_mensal:.2f}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "lD1ZfoUsaOEl"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qpBkzc_4aP8g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calcular_valor_pizza(sabor, tamanho):\n",
        "    #Calculando o preço de uma pizza baseado no sabor e tamanho.\n",
        "       # sabor: 'PS' para pizza salgada, 'PD' para pizza doce.\n",
        "       # tamanho: 'P', 'M' ou 'G'.\n",
        "       # Returns:\n",
        "       # O valor da pizza.\n",
        "\n",
        "\n",
        "    if sabor == 'PS':\n",
        "        if tamanho == 'P':\n",
        "            return 30\n",
        "        elif tamanho == 'M':\n",
        "            return 45\n",
        "        elif tamanho == 'G':\n",
        "            return 60\n",
        "    elif sabor == 'PD':\n",
        "        if tamanho == 'P':\n",
        "            return 34\n",
        "        elif tamanho == 'M':\n",
        "            return 48\n",
        "        elif tamanho == 'G':\n",
        "            return 66\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "def main():\n",
        "    print(\"-----Bem-vindos à Pizzaria do Raul Robert Botelho Silva-----\")\n",
        "    print('------------------------Cardápio----------------------------')\n",
        "    print(\"-\" * 45)\n",
        "    print(\"| Tamanho | Pizza Salgada (PS) | Pizza Doce (PD) |\")\n",
        "    print(\"-\" * 45)\n",
        "    print(\"|    P    |      R$ 30.00      |     R$ 34.00    |\")\n",
        "    print(\"|    M    |      R$ 45.00      |     R$ 48.00    |\")\n",
        "    print(\"|    G    |      R$ 60.00      |     R$ 66.00    |\")\n",
        "\n",
        "\n",
        "\n",
        "    valor_total = 0\n",
        "    while True:\n",
        "        sabor = input(\"Digite o sabor da pizza (PS/PD): \").upper()\n",
        "        while sabor not in ['PS', 'PD']:\n",
        "            print(\"Sabor inválido. Tente novamente.\")\n",
        "            sabor = input(\"Digite o sabor da pizza (PS/PD): \").upper()\n",
        "\n",
        "        tamanho = input(\"Digite o tamanho da pizza (P/M/G): \").upper()\n",
        "        while tamanho not in ['P', 'M', 'G']:\n",
        "            print(\"Tamanho inválido. Tente novamente.\")\n",
        "            tamanho = input(\"Digite o tamanho da pizza (P/M/G): \").upper()\n",
        "\n",
        "        valor_pizza = calcular_valor_pizza(sabor, tamanho)\n",
        "        valor_total += valor_pizza\n",
        "        print(f\"O valor da pizza é R$ {valor_pizza:.2f}\")\n",
        "\n",
        "        continuar = input(\"Deseja pedir mais alguma coisa? (S/N): \").upper()\n",
        "        if continuar != 'S':\n",
        "            break\n",
        "\n",
        "    print(f\"O valor total do seu pedido é R$ {valor_total:.2f}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "JOki2GAffUXP",
        "outputId": "75fb1ed1-6942-4263-b8ca-8ebca5a45f9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-----Bem-vindos à Pizzaria do Raul Robert Botelho Silva-----\n",
            "------------------------Cardápio----------------------------\n",
            "---------------------------------------------\n",
            "| Tamanho | Pizza Salgada (PS) | Pizza Doce (PD) |\n",
            "---------------------------------------------\n",
            "|    P    |      R$ 30.00      |     R$ 34.00    |\n",
            "|    M    |      R$ 45.00      |     R$ 48.00    |\n",
            "|    G    |      R$ 60.00      |     R$ 66.00    |\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-73600f0e94c3>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-15-73600f0e94c3>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     38\u001b[0m     \u001b[0mvalor_total\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m         \u001b[0msabor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Digite o sabor da pizza (PS/PD): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0msabor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'PS'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'PD'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Sabor inválido. Tente novamente.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\" Bem-vindo à Madeireira do Lenhador Raul Robert Botelho Silva \".center(50))\n",
        "print(\"                Tabela de Preços               \")\n",
        "print(\"   Tipo de Madeira            Valor por m³ (R$)\")\n",
        "print(\" PIN - Toras de Pinho           150.40\")\n",
        "print(\" PER - Toras de Peroba          170.20\")\n",
        "print(\" MOG - Toras de Mogno           190.90\")\n",
        "print(\" IPE - Toras de Ipê             210.10\")\n",
        "print(\" IMB - Toras de Imbuia          220.70\")\n",
        "\n",
        "def escolha_tipo():\n",
        "\n",
        "    while True:\n",
        "        tipo_valor = input(\"Digite o tipo de madeira: \").strip().upper()\n",
        "        if tipo_valor == \"PIN\":\n",
        "            return 150.40\n",
        "        elif tipo_valor == \"PER\":\n",
        "            return 170.20\n",
        "        elif tipo_valor == \"MOG\":\n",
        "            return 190.90\n",
        "        elif tipo_valor == \"IPE\":\n",
        "            return 210.10\n",
        "        elif tipo_valor == \"IMB\":\n",
        "            return 220.70\n",
        "        else:\n",
        "            print(\"Escolha inválida. Tente novamente.\")\n",
        "\n",
        "def qtd_toras():\n",
        "    while True:\n",
        "        try:\n",
        "            qtd = float(input(\"Digite a quantidade de toras (em m³): \"))\n",
        "            if qtd > 2000:\n",
        "                print(\"Quantidade inválida. A quantidade máxima é de 2000m³.\")\n",
        "                continue\n",
        "            elif qtd < 100:\n",
        "                return qtd, 0.0\n",
        "            elif 100 <= qtd < 500:\n",
        "                return qtd, 0.04\n",
        "            elif 500 <= qtd < 1000:\n",
        "                return qtd, 0.09\n",
        "            elif 1000 <= qtd <= 2000:\n",
        "                return qtd, 0.16\n",
        "        except ValueError:\n",
        "            print(\"Valor inválido. Por favor, insira um número.\")\n",
        "\n",
        "def transporte():\n",
        "    while True:\n",
        "        print(\" Escolha o tipo de Transporte: \".center(50))\n",
        "        print(\" Opção   Tipo de Transporte               Custo \")\n",
        "        print(\"   1    Transporte Rodoviário         R$: 1000.00\")\n",
        "        print(\"   2    Transporte Ferroviário        R$: 2000.00\")\n",
        "        print(\"   3    Transporte Hidroviário        R$: 2500.00\")\n",
        "\n",
        "\n",
        "        try:\n",
        "            # Perguntando pelo transporte\n",
        "            opcao = int(input(\"Escolha o tipo de transporte: \"))\n",
        "            if opcao == 1:\n",
        "                return 1000.00\n",
        "            elif opcao == 2:\n",
        "                return 2000.00\n",
        "            elif opcao == 3:\n",
        "                return 2500.00\n",
        "            else:\n",
        "                print(\"Opção de transporte inválida. Tente novamente.\")\n",
        "        except ValueError:\n",
        "            print(\"Entrada inválida. Por favor, insira um número.\")\n",
        "\n",
        "tipo_valor = escolha_tipo()\n",
        "qtd, desconto = qtd_toras()\n",
        "transporte_valor = transporte()\n",
        "\n",
        "total = ((tipo_valor* qtd) * (1 - desconto)) + transporte_valor\n",
        "\n",
        "print(f\"Valor total: R$ {total:.2f}\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "kx8DNqYr4Zka",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "81e63745-66ba-4c4d-8e02-b4f9356f52fa"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Bem-vindo à Madeireira do Lenhador Raul Robert Botelho Silva \n",
            "                Tabela de Preços               \n",
            "   Tipo de Madeira            Valor por m³ (R$)\n",
            " PIN - Toras de Pinho           150.40\n",
            " PER - Toras de Peroba          170.20\n",
            " MOG - Toras de Mogno           190.90\n",
            " IPE - Toras de Ipê             210.10\n",
            " IMB - Toras de Imbuia          220.70\n",
            "Digite o tipo de madeira: IPE\n",
            "Digite a quantidade de toras (em m³): 500\n",
            "          Escolha o tipo de Transporte:           \n",
            " Opção   Tipo de Transporte               Custo \n",
            "   1    Transporte Rodoviário         R$: 1000.00\n",
            "   2    Transporte Ferroviário        R$: 2000.00\n",
            "   3    Transporte Hidroviário        R$: 2500.00\n",
            "Escolha o tipo de transporte: 3\n",
            "Valor total: R$ 98095.50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "vs4SXfCb-Ymn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "RCZaEMt2VfBP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **negrito**QUESTÃO 4 de 4"
      ],
      "metadata": {
        "id": "HKBrekU6aVHz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Apresentação inicial com meu nome completo\n",
        "print(\"Bem-vindos à lista de contatos do Bruno Kostiuk\")\n",
        "\n",
        "# Lista para armazenar contatos\n",
        "lista_contatos = []\n",
        "\n",
        "# Variável global para controle de ID (substitua o valor pelo número do seu RU)\n",
        "id_global = 12345678\n",
        "\n",
        "# Função para cadastrar contato\n",
        "def cadastrar_contato(id):\n",
        "    \"\"\"\n",
        "    Função responsável por cadastrar um novo contato na lista de contatos.\n",
        "    \"\"\"\n",
        "    nome = input(\"Informe o nome do contato: \")\n",
        "    atividade = input(\"Informe a atividade do contato: \")\n",
        "    telefone = input(\"Informe o telefone do contato: \")\n",
        "\n",
        "    # Criar o dicionário do contato\n",
        "    contato = {\n",
        "        \"id\": id,\n",
        "        \"nome\": nome,\n",
        "        \"atividade\": atividade,\n",
        "        \"telefone\": telefone\n",
        "    }\n",
        "\n",
        "    # Adiciona o contato à lista\n",
        "    lista_contatos.append(contato.copy())\n",
        "    print(\"Contato cadastrado com sucesso!\\n\")\n",
        "\n",
        "# Função para consultar contatos\n",
        "def consultar_contatos():\n",
        "    \"\"\"\n",
        "    Função responsável por consultar contatos.\n",
        "    \"\"\"\n",
        "    while True:\n",
        "        print(\"\\nOpções de consulta:\")\n",
        "        print(\"1. Consultar Todos\")\n",
        "        print(\"2. Consultar por Id\")\n",
        "        print(\"3. Consultar por Atividade\")\n",
        "        print(\"4. Retornar ao menu principal\")\n",
        "        opcao = input(\"Escolha uma opção: \")\n",
        "\n",
        "        if opcao == \"1\":\n",
        "            print(\"\\nTodos os contatos cadastrados:\")\n",
        "            for contato in lista_contatos:\n",
        "                print(contato)\n",
        "        elif opcao == \"2\":\n",
        "            id_consulta = input(\"Informe o id do contato: \")\n",
        "            contato_encontrado = next((c for c in lista_contatos if c[\"id\"] == int(id_consulta)), None)\n",
        "            if contato_encontrado:\n",
        "                print(contato_encontrado)\n",
        "            else:\n",
        "                print(\"Contato não encontrado.\")\n",
        "        elif opcao == \"3\":\n",
        "            atividade_consulta = input(\"Informe a atividade para consulta: \")\n",
        "            contatos_filtrados = [c for c in lista_contatos if c[\"atividade\"] == atividade_consulta]\n",
        "            if contatos_filtrados:\n",
        "                for contato in contatos_filtrados:\n",
        "                    print(contato)\n",
        "            else:\n",
        "                print(\"Nenhum contato encontrado com essa atividade.\")\n",
        "        elif opcao == \"4\":\n",
        "            return\n",
        "        else:\n",
        "            print(\"Opção inválida!\")\n",
        "\n",
        "# Função para remover contato\n",
        "def remover_contato():\n",
        "    \"\"\"\n",
        "    Função responsável por remover um contato da lista.\n",
        "    \"\"\"\n",
        "    while True:\n",
        "        id_remover = input(\"Informe o id do contato a ser removido: \")\n",
        "        contato_encontrado = next((c for c in lista_contatos if c[\"id\"] == int(id_remover)), None)\n",
        "        if contato_encontrado:\n",
        "            lista_contatos.remove(contato_encontrado)\n",
        "            print(\"Contato removido com sucesso!\\n\")\n",
        "            return\n",
        "        else:\n",
        "            print(\"Id inválido! Tente novamente.\")\n",
        "\n",
        "# Menu principal\n",
        "while True:\n",
        "    print(\"\\nMenu Principal:\")\n",
        "    print(\"1. Cadastrar Contato\")\n",
        "    print(\"2. Consultar Contato\")\n",
        "    print(\"3. Remover Contato\")\n",
        "    print(\"4. Encerrar Programa\")\n",
        "    escolha = input(\"Escolha uma opção: \")\n",
        "\n",
        "    if escolha == \"1\":\n",
        "        id_global += 1\n",
        "        cadastrar_contato(id_global)\n",
        "    elif escolha == \"2\":\n",
        "        consultar_contatos()\n",
        "    elif escolha == \"3\":\n",
        "        remover_contato()\n",
        "    elif escolha == \"4\":\n",
        "        print(\"Encerrando programa. Até logo!\")\n",
        "        break\n",
        "    else:\n",
        "        print(\"Opção inválida! Tente novamente.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dgVRXiahahTY",
        "outputId": "87872f72-a799-4875-a604-fe0d03d97f7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Bem-vindos à lista de contatos do Bruno Kostiuk\n",
            "\n",
            "Menu Principal:\n",
            "1. Cadastrar Contato\n",
            "2. Consultar Contato\n",
            "3. Remover Contato\n",
            "4. Encerrar Programa\n"
          ]
        }
      ]
    }
  ]
}